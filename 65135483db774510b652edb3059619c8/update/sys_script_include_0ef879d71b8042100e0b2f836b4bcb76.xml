<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_agile.BacklogItemManageOrder</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Updates the order of all backlog items based on the order of the given backlog item. The function considers all required backlog items recursively.</description>
        <name>BacklogItemManageOrder</name>
        <script><![CDATA[function BacklogItemManageOrder(grBacklogItem,aPath)
{
	var RecordManageOrder = x_snc_devtools.RecordManageOrder;
	var GetArrayValue = x_snc_devtools.GetArrayValue;
	var ArrayValueExists = x_snc_devtools.ArrayValueExists;
	var GetRecord = x_snc_devtools.GetRecord;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var Clone = x_snc_devtools.Clone;
	
	RecordManageOrder(
		'x_snc_agile_backlog_item',
		'order',
		grBacklogItem ? grBacklogItem.sys_id : null,
		grBacklogItem ? grBacklogItem.order : null);

	var strSysId = '';

	if (grBacklogItem)
	{
		strSysId = GetStringValue(grBacklogItem.sys_id);
		var aPathNew = Clone(GetArrayValue(aPath));
		if (ArrayValueExists(aPathNew,GetStringValue(grBacklogItem.sys_id)) == true)
		{
			return;
		}	
		aPathNew.push(GetStringValue(grBacklogItem.sys_id));
		
		// Downstream: update required backlog items
		var aItems = GetArrayValue(grBacklogItem.required_backlog_items);
		for (var nItem = 0; nItem < aItems.length; nItem++)
		{
			var grItem = GetRecord('x_snc_agile_backlog_item',aItems[nItem]);
			if (grItem != false)
			{
				if (grItem.order > grBacklogItem.order)
				{
					grItem.order = grBacklogItem.order;
					BacklogItemManageOrder(grItem,aPathNew);
				}
			}
		}
		
		// Upstream: update dependent backlog items
		var grDependentBacklogItems = new GlideRecord('x_snc_agile_backlog_item');
		grDependentBacklogItems.addQuery('required_backlog_items','CONTAINS',GetStringValue(grBacklogItem.sys_id));
		grDependentBacklogItems.query();
		while (grDependentBacklogItems.next())
		{
			if (grDependentBacklogItems.order < grBacklogItem.order)
			{
				grDependentBacklogItems.order = grBacklogItem.order;
				BacklogItemManageOrder(grDependentBacklogItems,aPathNew);
			}
		}		
	}

	var grBacklogItems = new GlideRecord('x_snc_agile_backlog_item');
	grBacklogItems.addActiveQuery();
	grBacklogItems.query();
	while (grBacklogItems.next())
	{
		if (strSysId != grBacklogItems.sys_id)
		{
			BacklogItemSortRequiredBacklogItems(grBacklogItems);
			grBacklogItems.update();
		}
	}

	return;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-04 15:42:09</sys_created_on>
        <sys_id>0ef879d71b8042100e0b2f836b4bcb76</sys_id>
        <sys_mod_count>18</sys_mod_count>
        <sys_name>BacklogItemManageOrder</sys_name>
        <sys_package display_value="Agile" source="x_snc_agile">65135483db774510b652edb3059619c8</sys_package>
        <sys_policy/>
        <sys_scope display_value="Agile">65135483db774510b652edb3059619c8</sys_scope>
        <sys_update_name>sys_script_include_0ef879d71b8042100e0b2f836b4bcb76</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-01 18:58:37</sys_updated_on>
    </sys_script_include>
</record_update>
